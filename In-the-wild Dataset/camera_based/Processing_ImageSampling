/*
  This sketch reads a raw Stream of RGB565 pixels
 from the Serial port and displays the frame on
 the window.

 Use with the Examples -> CameraCaptureRawBytes Arduino sketch.

 This example code is in the public domain.
 */

import processing.serial.*;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;


import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.Files;

Serial myPort;

// must match resolution used in the sketch
final int cameraWidth = 64;
final int cameraHeight = 64;
final int cameraBytesPerPixel = 1;
final int bytesPerFrame = cameraWidth * cameraHeight * cameraBytesPerPixel;

PImage myImage;
byte[] frameBuffer = new byte[bytesPerFrame];
byte[] header = new byte[3];
byte[] score = new byte[2];

void setup()
{

  size(320, 320);

  // if you have only ONE serial port active
  //myPort = new Serial(this, Serial.list()[0], 9600);          // if you have only ONE serial port active

  // if you know the serial port name
  myPort = new Serial(this, "COM3", 921600);                    // Windows
  //  myPort = new Serial(this, "/dev/ttyUSB0", 921600);            // Linux
  // myPort = new Serial(this, "/dev/cu.usbmodem14401", 9600);     // Mac

  // wait for full frame of bytes
  myPort.buffer(bytesPerFrame);
  myImage = createImage(cameraWidth, cameraHeight, GRAY);

  fill(255, 0, 0);
}

void draw()
{
  image(myImage, 0, 0, 320, 320);
}
int state = 0;
int read = 0;
int result = 0;
int startbyte;
void serialEvent(Serial myPort) {
  if (read == 0) {
    startbyte = myPort.read();
    if (startbyte == 0x55) {
      state = 1;
    }
    if (startbyte == 0xAA && state == 1) {
      read = 1;
    }
    if (startbyte == 0xBB && state == 1) {
      result = 1;
    }
  }
  if (result == 1) {
     myPort.readBytes(score);
     result = 0;
  }
  if (read ==1) {

    // read the saw bytes in
    myPort.readBytes(frameBuffer);

    // save raw bytes into a file
    try{
      Path path = Paths.get("D://image");
      Files.write(path, frameBuffer);
    } catch (IOException e) {
        System.out.println("An error occurred.");
        e.printStackTrace();
    }


    // the following is to show the image live
    // access raw bytes via byte buffer
    int i = 0, p1, p2, r, g, b;

    ByteBuffer bb = ByteBuffer.wrap(frameBuffer);
    bb.order(ByteOrder.BIG_ENDIAN);
    while (bb.hasRemaining()) {
      // read 16-bit pixel
      short p = bb.getShort();
      p1 = (p>>8)&0xFF;  // get high 8bit data
      p2 = p&0xFF;       // low

      r = p1; g = p1; b = p1;
      myImage .pixels[i++] = color(r, g, b); // set pixel color

      r = p2; g = p2; b = p2;
      myImage .pixels[i++] = color(r, g, b); // set pixel color
    }

    read = 0;
  }
  myImage .updatePixels();
}